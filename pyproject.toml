[tool.poetry]
name = "probirka"
version = "0.1.0"
description = "Tool for getting environment variables and checking connections to databases"
authors = ["KODE <kode@kode.com>"]

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0.0"

[tool.poetry.group.dev.dependencies]
poetry = "~1.8"
poetry-plugin-sort = "^0.2"
pre-commit = "^3.5"
aiohttp = "*"
fastapi = "*"

[tool.poetry.group.linters.dependencies]
black = "^24.3"
isort = "^5.12"
mypy = "^1.10"
ruff = "^0.4"

[tool.poetry.group.security.dependencies]
bandit = "^1.7"
safety = "^3.0"

[tool.poetry.group.tests.dependencies]
pytest = "^7.1"
pytest-asyncio = "^0.20"
pytest-cov = "^4.0"
pytest-timeout = "^2.1"

[tool.poetry.group.examples.dependencies]
uvicorn = "^0.30.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = "tests"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning"
]
addopts = "--cache-clear --color=yes -vv"
asyncio_mode = "auto"

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | \.vscode
  | \.idea
)
'''

[tool.mypy]
python_version = 3.8
ignore_missing_imports = true
follow_imports = "silent"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_reexport = true
exclude = [
    '.venv/',
    'venv/',
]

[tool.isort]
line_length = 120
force_grid_wrap = 0
multi_line_output = 3
use_parentheses = true
include_trailing_comma = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
lines_between_types = 1

[tool.ruff]
target-version = "py38"
line-length = 120
exclude = [
  ".venv",
]
lint.ignore = [
  "PLR0913",  # Too many arguments to function call
  "RUF001",   # Docstring contains ambiguous chars
  "RUF002",   # Docstring contains ambiguous chars
  "RUF003",   # Docstring contains ambiguous chars
]
lint.flake8-tidy-imports.ban-relative-imports = "all"
lint.mccabe.max-complexity = 20
lint.select = [
  "F", # Pyflakes
  # "E/W", # pycodestyle
  "C90", # mccabe
  # "I", # isort
  # "N", # pep8-naming
  # "D", # pydocstyle
  "UP", # pyupgrade
  "YTT", # flake8-2020
  # "ANN", # flake8-annotations
  # "ASYNC", # flake8-async
  # "TRIO", # flake8-trio
  # "S", # flake8-bandit
  # "BLE", # flake8-blind-except
  # "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  # "A", # flake8-builtins
  # "COM", # flake8-commas
  # "CPY", # flake8-copyright
  "C4", # flake8-comprehensions
  # "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  # "DJ", # flake8-django
  # "EM", # flake8-errmsg
  # "EXE", # flake8-executable
  # "FA", # flake8-future-annotations
  "ISC", # flake8-implicit-str-concat
  # "ICN", # flake8-import-conventions
  "G", # flake8-logging-format
  "INP", # flake8-no-pep420
  # "PIE", # flake8-pie
  "T20", # flake8-print
  # "PYI", # flake8-pyi
  # "PT", # flake8-pytest-style
  # "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  # "SLOT", # flake8-slots
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  # "TCH", # flake8-type-checking
  # "INT", # flake8-gettext
  # "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  # "TD", # flake8-todos
  # "FIX", # flake8-fixme
  "ERA", # eradicate
  # "PD", # pandas-vet
  # "PGH", # pygrep-hooks
  "PL", # Pylint
  # "TRY", # tryceratops
  # "FLY", # flynt
  # "NPY", # NumPy-specific rules
  # "AIR", # Airflow
  # "PERF", # Perflint
  # "FURB", # refurb
  # "LOG", # flake8-logging
  "RUF", # Ruff-specific rules
]
